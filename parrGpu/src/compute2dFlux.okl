@kernel void compute2dFluxF(double* F, 
        @restrict const double* U_L,  
        @restrict const double* U_R,  
        @restrict const double* nix, 
        @restrict const double* niy)
{

  for(int j = 0; j < o_njc; j++; @tile(8, @outer, @inner))
  {
    for(int i = 0; i <= o_nic; i++; @tile(32, @inner))//@outer(1))
    {
      double ul[o_NEQ], ur[o_NEQ];
      const int ido = j*(o_nic+1)+i;
      for(int eq = 0; eq < o_NEQ; eq++)
      {
        int id = (ido)*o_NEQ+eq;
        ul[eq] = U_L[id];
        ur[eq] = U_R[id];
      }
      double vl[o_NEQ], vr[o_NEQ];
      // convert to prim form
      vl[o_rhoid] = ul[o_rhoid];
      vl[o_uid] = ul[o_uid]/ul[o_rhoid];
      vl[o_vid] = ul[o_vid]/ul[o_rhoid];
      vl[o_wid] = ul[o_wid]/ul[o_rhoid];
      vl[o_piid] = ((o_gamma - 1.0) *(ul[o_piid]-( 
          - 0.5*ul[o_uid]*((ul[o_uid])/(ul[o_rhoid])) 
          - 0.5*ul[o_vid]*((ul[o_vid])/(ul[o_rhoid])) 
          - 0.5*ul[o_wid]*((ul[o_wid])/(ul[o_rhoid])) 
          - 0.5*ul[o_bxid]*(ul[o_bxid])/o_mu0
          - 0.5*ul[o_byid]*(ul[o_byid])/o_mu0
          - 0.5*ul[o_bzid]*(ul[o_bzid])/o_mu0)));
      vl[o_bxid] = ul[o_bxid];
      vl[o_byid] = ul[o_byid];
      vl[o_bzid] = ul[o_bzid];

      // calc max speed
      double ca = sqrt(ul[o_bxid]*ul[o_bxid]+ul[o_byid]*ul[o_byid]+ul[o_bzid]*ul[o_bzid]);
      double cs = sqrt(vl[o_piid]*o_gamma/ul[o_rhoid]);// p gamma/rho
      double cadir = ul[o_bxid]*ul[o_bxid]/(o_mu0*ul[o_rhoid]);
      double CA =sqrt(0.5*(ca*ca+cs*cs+sqrt((ca*ca+cs*cs)*(ca*ca+cs*cs)-4*cs*cs*cadir*cadir)));

      // grab right state
      vr[o_rhoid] = ur[o_rhoid];
      vr[o_uid] = ur[o_uid]/ur[o_rhoid];
      vr[o_vid] = ur[o_vid]/ur[o_rhoid];
      vr[o_wid] = ur[o_wid]/ur[o_rhoid];
      vr[o_piid] = ((o_gamma - 1.0) *(ur[o_piid]-( 
          - 0.5*ur[o_uid]*((ur[o_uid])/(ur[o_rhoid])) 
          - 0.5*ur[o_vid]*((ur[o_vid])/(ur[o_rhoid])) 
          - 0.5*ur[o_wid]*((ur[o_wid])/(ur[o_rhoid])) 
          - 0.5*ur[o_bxid]*(ur[o_bxid])/o_mu0
          - 0.5*ur[o_byid]*(ur[o_byid])/o_mu0
          - 0.5*ur[o_bzid]*(ur[o_bzid])/o_mu0)));
      vr[o_bxid] = ur[o_bxid];
      vr[o_byid] = ur[o_byid];
      vr[o_bzid] = ur[o_bzid];

      // calc max speed // ca dir is in x dir
      ca = sqrt(ur[o_bxid]*ur[o_bxid]+ur[o_byid]*ur[o_byid]+ur[o_bzid]*ur[o_bzid]);
      cs = sqrt(vr[o_piid]*o_gamma/ur[o_rhoid]);// p gamma/rho
      cadir = ur[o_bxid]*ur[o_bxid]/(o_mu0*ur[o_rhoid]);
      double CB =sqrt(0.5*(ca*ca+cs*cs+sqrt((ca*ca+cs*cs)*(ca*ca+cs*cs)-4*cs*cs*cadir*cadir)));

      // calculate normal vector wave speed 
      double u_A = (ul[o_uid]*nix[ido]+ul[o_vid]*niy[ido])/ul[o_rhoid];
      double u_B = (ur[o_uid]*nix[ido]+ur[o_vid]*niy[ido])/ur[o_rhoid];
      double b_A = (ul[o_bxid]*nix[ido]+ul[o_byid]*niy[ido])/ul[o_rhoid];
      double b_B = (ur[o_bxid]*nix[ido]+ur[o_byid]*niy[ido])/ur[o_rhoid];

      // calculate max and min eigen values
      double lambdaA = fmin(u_A, u_B) - fmax(CA, CB);
      double lambdaB = fmax(u_A, u_B) + fmax(CA, CB);

      // Compute flux state A (left)
      double FA[o_NEQ], FB[o_NEQ];
      FA[o_rhoid] = vl[o_rhoid]*u_A; 

      FA[o_uid] = vl[o_rhoid]*vl[o_uid]*u_A - vl[o_bxid]*b_A/o_mu0 + vl[o_piid]*nix[ido] + (vl[o_bxid]*vl[o_bxid]+vl[o_byid]*vl[o_byid]+vl[o_bzid]*vl[o_bzid])*nix[ido]/(2*o_mu0);

      FA[o_vid] = vl[o_rhoid]*u_A*vl[o_vid]- b_A*vl[o_byid]/o_mu0 + vl[o_piid]*niy[ido] + (vl[o_bxid]*vl[o_bxid]+vl[o_byid]*vl[o_byid]+vl[o_bzid]*vl[o_bzid])*niy[ido]/(2*o_mu0);

      FA[o_wid] = vl[o_rhoid]*u_A*vl[o_wid] - b_A*vl[o_bzid]/o_mu0;

      FA[o_piid] = (ul[o_piid]+vl[o_piid]+0.5*(1/o_mu0)*(vl[o_bxid]*vl[o_bxid]+vl[o_byid]*vl[o_byid]+vl[o_bzid]*vl[o_bzid]))*u_A - (1/o_mu0)*b_A*(vl[o_uid]*vl[o_bxid]+vl[o_vid]*vl[o_byid]+vl[o_wid]*vl[o_bzid]);

      FA[o_bxid] = u_A*vl[o_bxid]-vl[o_uid]*b_A;

      FA[o_byid] = u_A*vl[o_byid]-vl[o_vid]*b_A;

      FA[o_bzid] = u_A*vl[o_bzid]-vl[o_wid]*b_A;

      // Compute flux for state B (right)
      FB[o_rhoid] = vr[o_rhoid]*u_B; 

      FB[o_uid] = vr[o_rhoid]*vr[o_uid]*u_B - vr[o_bxid]*b_B/o_mu0 + vr[o_piid]*nix[ido] + (vr[o_bxid]*vr[o_bxid]+vr[o_byid]*vr[o_byid]+vr[o_bzid]*vr[o_bzid])*nix[ido]/(2*o_mu0);

      FB[o_vid] = vr[o_rhoid]*u_B*vr[o_vid]- b_B*vr[o_byid]/o_mu0 + vr[o_piid]*niy[ido] + (vr[o_bxid]*vr[o_bxid]+vr[o_byid]*vr[o_byid]+vr[o_bzid]*vr[o_bzid])*niy[ido]/(2*o_mu0);

      FB[o_wid] = vr[o_rhoid]*u_B*vr[o_wid] - b_B*vr[o_bzid]/o_mu0;

      FB[o_piid] = (ur[o_piid]+vr[o_piid]+0.5*(1/o_mu0)*(vr[o_bxid]*vr[o_bxid]+vr[o_byid]*vr[o_byid]+vr[o_bzid]*vr[o_bzid]))*u_B - (1/o_mu0)*b_B*(vr[o_uid]*vr[o_bxid]+vr[o_vid]*vr[o_byid]+vr[o_wid]*vr[o_bzid]);

      FB[o_bxid] = u_B*vr[o_bxid]-vr[o_uid]*b_B;

      FB[o_byid] = u_B*vr[o_byid]-vr[o_vid]*b_B;

      FB[o_bzid] = u_B*vr[o_bzid]-vr[o_wid]*b_B;
 
      // Apply hll filtering
      if (lambdaA > 0)
        for(int eq = 0; eq < o_NEQ; eq++)
          F[ido*o_NEQ+eq] = FA[eq];
      else if (lambdaB < 0)
        for(int eq = 0; eq < o_NEQ; eq++)
          F[ido*o_NEQ+eq] = FB[eq];
      else 
        for(int eq = 0; eq < o_NEQ; eq++)
          F[ido*o_NEQ+eq] = (lambdaB*FA[eq] - lambdaA*FB[eq]+lambdaA*lambdaB*(ul[eq]-ur[eq]))/(lambdaB-lambdaA);
    }
  }
}

@kernel void compute2dFluxG(double* G,  
        @restrict const double* U_B,  
        @restrict const double* U_T, 
        @restrict const double* njx, 
        @restrict const double* njy)
{
  for(int j = 0; j <= o_njc; j++; @tile(8, @outer, @inner))
  {
    for(int i = 0; i < o_nic; i++; @tile(32, @inner))//@outer(1))
    {
      double ub[o_NEQ], ut[o_NEQ];
      int ido = j*(o_nic)+i;
      for(int eq = 0; eq < o_NEQ; eq++)//@inner(0))
      {
        int id = (ido)*o_NEQ+eq;
        ub[eq] = U_B[id];
        ut[eq] = U_T[id];
      }
      double vb[o_NEQ], vt[o_NEQ];
      // convert to prim form
      vb[o_rhoid] = ub[o_rhoid];
      vb[o_uid] = ub[o_uid]/ub[o_rhoid];
      vb[o_vid] = ub[o_vid]/ub[o_rhoid];
      vb[o_wid] = ub[o_wid]/ub[o_rhoid];
      vb[o_piid] = ((o_gamma - 1.0) *(ub[o_piid]-( 
          - 0.5*ub[o_uid]*((ub[o_uid])/(ub[o_rhoid])) 
          - 0.5*ub[o_vid]*((ub[o_vid])/(ub[o_rhoid])) 
          - 0.5*ub[o_wid]*((ub[o_wid])/(ub[o_rhoid])) 
          - 0.5*ub[o_bxid]*(ub[o_bxid])/o_mu0
          - 0.5*ub[o_byid]*(ub[o_byid])/o_mu0
          - 0.5*ub[o_bzid]*(ub[o_bzid])/o_mu0)));
      vb[o_bxid] = ub[o_bxid];
      vb[o_byid] = ub[o_byid];
      vb[o_bzid] = ub[o_bzid];

      // calc max speed
      double ca = sqrt(ub[o_bxid]*ub[o_bxid]+ub[o_byid]*ub[o_byid]+ub[o_bzid]*ub[o_bzid]);
      double cs = sqrt(vb[o_piid]*o_gamma/ub[o_rhoid]);// p gamma/rho
      double cadir = ub[o_byid]*ub[o_byid]/(o_mu0*ub[o_rhoid]);
      double CA =sqrt(0.5*(ca*ca+cs*cs+sqrt((ca*ca+cs*cs)*(ca*ca+cs*cs)-4*cs*cs*cadir*cadir)));

      // grab right state
      vt[o_rhoid] = ut[o_rhoid];
      vt[o_uid] = ut[o_uid]/ut[o_rhoid];
      vt[o_vid] = ut[o_vid]/ut[o_rhoid];
      vt[o_wid] = ut[o_wid]/ut[o_rhoid];
      vt[o_piid] = ((o_gamma - 1.0) *(ut[o_piid]-( 
          - 0.5*ut[o_uid]*((ut[o_uid])/(ut[o_rhoid])) 
          - 0.5*ut[o_vid]*((ut[o_vid])/(ut[o_rhoid])) 
          - 0.5*ut[o_wid]*((ut[o_wid])/(ut[o_rhoid])) 
          - 0.5*ut[o_bxid]*(ut[o_bxid])/o_mu0
          - 0.5*ut[o_byid]*(ut[o_byid])/o_mu0
          - 0.5*ut[o_bzid]*(ut[o_bzid])/o_mu0)));
      vt[o_bxid] = ut[o_bxid];
      vt[o_byid] = ut[o_byid];
      vt[o_bzid] = ut[o_bzid];

      // calc max speed ca dir in y dir
      ca = sqrt(ut[o_bxid]*ut[o_bxid]+ut[o_byid]*ut[o_byid]+ut[o_bzid]*ut[o_bzid]);
      cs = sqrt(vt[o_piid]*o_gamma/ut[o_rhoid]);// p gamma/rho
      cadir = ut[o_byid]*ut[o_byid]/(o_mu0*ut[o_rhoid]);
      double CB =sqrt(0.5*(ca*ca+cs*cs+sqrt((ca*ca+cs*cs)*(ca*ca+cs*cs)-4*cs*cs*cadir*cadir)));

      //printf("ido = %d, CB = %lf\n", ido, CA);
      
      // calculate normal vector wave speed 
      double u_A = (ub[o_uid]*njx[ido]+ub[o_vid]*njy[ido])/ub[o_rhoid];
      double u_B = (ut[o_uid]*njx[ido]+ut[o_vid]*njy[ido])/ut[o_rhoid];
      double b_A = (ub[o_bxid]*njx[ido]+ub[o_byid]*njy[ido])/ub[o_rhoid];
      double b_B = (ut[o_bxid]*njx[ido]+ut[o_byid]*njy[ido])/ut[o_rhoid];

      // calculate max and min eigen values
      double lambdaA = fmin(u_A, u_B) - fmax(CA, CB);
      double lambdaB = fmax(u_A, u_B) + fmax(CA, CB);

      // Compute flux state A (left)
      double FA[o_NEQ], FB[o_NEQ];
      FA[o_rhoid] = vb[o_rhoid]*u_A; 

      FA[o_uid] = vb[o_rhoid]*vb[o_uid]*u_A - vb[o_bxid]*b_A/o_mu0 + vb[o_piid]*njx[ido] + (vb[o_bxid]*vb[o_bxid]+vb[o_byid]*vb[o_byid]+vb[o_bzid]*vb[o_bzid])*njx[ido]/(2*o_mu0);

      FA[o_vid] = vb[o_rhoid]*u_A*vb[o_vid]- b_A*vb[o_byid]/o_mu0 + vb[o_piid]*njy[ido] + (vb[o_bxid]*vb[o_bxid]+vb[o_byid]*vb[o_byid]+vb[o_bzid]*vb[o_bzid])*njy[ido]/(2*o_mu0);

      FA[o_wid] = vb[o_rhoid]*u_A*vb[o_wid] - b_A*vb[o_bzid]/o_mu0;

      FA[o_piid] = (ub[o_piid]+vb[o_piid]+0.5*(1/o_mu0)*(vb[o_bxid]*vb[o_bxid]+vb[o_byid]*vb[o_byid]+vb[o_bzid]*vb[o_bzid]))*u_A - (1/o_mu0)*b_A*(vb[o_uid]*vb[o_bxid]+vb[o_vid]*vb[o_byid]+vb[o_wid]*vb[o_bzid]);

      FA[o_bxid] = u_A*vb[o_bxid]-vb[o_uid]*b_A;

      FA[o_byid] = u_A*vb[o_byid]-vb[o_vid]*b_A;

      FA[o_bzid] = u_A*vb[o_bzid]-vb[o_wid]*b_A;

      // Compute flux for state B (right)
      FB[o_rhoid] = vb[o_rhoid]*u_B; 

      FB[o_uid] = vb[o_rhoid]*vb[o_uid]*u_B - vb[o_bxid]*b_B/o_mu0 + vb[o_piid]*njx[ido] + (vb[o_bxid]*vb[o_bxid]+vb[o_byid]*vb[o_byid]+vb[o_bzid]*vb[o_bzid])*njx[ido]/(2*o_mu0);

      FB[o_vid] = vb[o_rhoid]*u_B*vb[o_vid]- b_B*vb[o_byid]/o_mu0 + vb[o_piid]*njy[ido] + (vb[o_bxid]*vb[o_bxid]+vb[o_byid]*vb[o_byid]+vb[o_bzid]*vb[o_bzid])*njy[ido]/(2*o_mu0);

      FB[o_wid] = vb[o_rhoid]*u_B*vb[o_wid] - b_B*vb[o_bzid]/o_mu0;

      FB[o_piid] = (ut[o_piid]+vb[o_piid]+0.5*(1/o_mu0)*(vb[o_bxid]*vb[o_bxid]+vb[o_byid]*vb[o_byid]+vb[o_bzid]*vb[o_bzid]))*u_B - (1/o_mu0)*b_B*(vb[o_uid]*vb[o_bxid]+vb[o_vid]*vb[o_byid]+vb[o_wid]*vb[o_bzid]);

      FB[o_bxid] = u_B*vb[o_bxid]-vb[o_uid]*b_B;

      FB[o_byid] = u_B*vb[o_byid]-vb[o_vid]*b_B;

      FB[o_bzid] = u_B*vb[o_bzid]-vb[o_wid]*b_B;
 
      // Apply hll filtering
      if (lambdaA > 0)
        for(int eq = 0; eq < o_NEQ; eq++)
          G[ido*o_NEQ+eq] = FA[eq];
      else if (lambdaB < 0)
        for(int eq = 0; eq < o_NEQ; eq++)
          G[ido*o_NEQ+eq] = FB[eq];
      else 
        for(int eq = 0; eq < o_NEQ; eq++)
          G[ido*o_NEQ+eq] = (lambdaB*FA[eq] - lambdaA*FB[eq]+lambdaA*lambdaB*(ub[eq]-ut[eq]))/(lambdaB-lambdaA);
    }
  }

}
